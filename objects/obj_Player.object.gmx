<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player object

//     &lt;-- CONSTANT VARIABLES --&gt;

// Global movement variables
global.accel = 0.135; //acceleration
global.grav = 0.15; //gravity speed

//Initiate Camera
instance_create(x, y, obj_controlView);

// Player attributes
maxSpd = 1; //maximum speed possible
hSpd = 0; //intiailize horizontal speed
vSpd = 0; //initialize vertical speed
maxJumpH = -2; //maximum jump height
initialJumpH = -1; // initial jump height
global.rollDist = 2; // the distance to roll
global.blockPushSpeed = 1; //how fast player pushes with a block
global.attackspeed = 0.2; // players attack speed
global.ladderClimbAccelSpd = 0.05; // how fast player begins to climb
global.ladderClimbMaxSpd = 0.5; // max speed at which he climbs at
global.slopeCoef = 1; // the higher the number the taller structures he can climb
global.titleAnimSpeed = 0.35;

// Player control variables
rolledOnce = false; // forces to commit to roll
rolledDamage = false; // used to only get once damage when rolling
inLedgeGrab = false; // determines if in ledge grab state
attacking = false; // controls whether attacking or not
attackedOnce = false; // number of times attacked
rolling = false; // remembers whether rolls or not
pushing = false; // checks whether in pushing state or not
onLadder = false; // checks whether in ladder state or not
onLadderAnimation = false; // controls image_index reset
onLadderAndSolid = false; // control ladder state
crouching = false; // makes sure to not go into idle animation
stayCrouched = false; // used for safety of mask switching
jumpAnimFinished = false; // controls jumping plats.
global.jumpThruPlat = true; // initialize to true
global.jumpedThrough = false; // jumped through plat.

//Scripts
state = move_state;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the player's state
get_input();

//execute state
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpAnimFinished = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Ladder">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// enemy is on the ladder

// player decides to get on ladder
if (global.interact){
    var thisLadder = instance_place(x, y, obj_Ladder);    
    if (thisLadder != noone)
        var tempX = abs(thisLadder.x - obj_Ladder.sprite_width/(12+2));
    if (!place_meeting(tempX, y, obj_outsideSolid)){
        obj_Player.state = ladder_state;
        playerYOnLadder = obj_Player.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attack animation

// make sure player stops instantly when horizontal speed is 0
if (sprite_index == spr_player_attack_b_walk &amp;&amp; hSpd == 0)
    sprite_index = spr_player_attack_b_idle;

if (!attacking &amp;&amp; !attackedOnce &amp;&amp; !pushing &amp;&amp; !rolling &amp;&amp; state!=ledge_grab_state) {
    attacking = true;
    image_speed = global.attackspeed;
    image_index = 0;
    if (hSpd == 0)
        sprite_index = spr_player_attack_a_idle;
    else
        sprite_index = spr_player_attack_a_walk;
    

    with (instance_create(x, y, obj_attackPlayerA)){
        image_xscale = obj_Player.image_xscale;
    }
    
    attackedOnce = true; // Go to the holding attack state
    
}

if (!attacking &amp;&amp; attackedOnce &amp;&amp; !pushing &amp;&amp; !rolling &amp;&amp; state!=ledge_grab_state) {
    attacking = true;
    image_speed = global.attackspeed;
    image_index = 0;
    if (hSpd == 0)
        sprite_index = spr_player_attack_b_idle;
    else
        sprite_index = spr_player_attack_b_walk;
    

    with (instance_create(x, y, obj_attackPlayerB)){
        image_xscale = obj_Player.image_xscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = 100;
y = 100;


if (room == rm_1)
    room_goto(rm_town__mainstreet);
if (room == rm_town__mainstreet)
    room_goto(rm_town_castlestreet);
if (room == rm_town_castlestreet)
    room_goto(rm_town_farm);
if (room == rm_town_farm)
    room_goto(rm_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>score += 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change states when animation ends

// change back to move state when animation ends

if (attacking)
    attacking = false;


if (rolling) 
    rolling = false;


if (crouching)
    crouching = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw debugging helpers
scr_mask_around_object();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart the level

game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize roll

if (!rolling &amp;&amp; vSpd == 0 &amp;&amp; state != ledge_grab_state) {
    image_speed = 0.2;
    image_index = 0;
    mask_index = spr_player_mask_crouch; // change to crouch mask
    sprite_index = spr_player_roll;
    
    //roll at the desired speed
    hSpd = image_xscale*global.rollDist; 
    
    rolling = true; // rolled
} else
    default_mask();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set attackedOnce to false again

attackedOnce = false;

// if theres a push block in front of me, go into pushing state instantly
if (place_meeting(x+((global.right-global.left)*maxSpd*global.blockPushSpeed), y, obj_parentPushableBlock))
    attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
